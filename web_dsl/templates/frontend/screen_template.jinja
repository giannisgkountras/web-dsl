{%import 'component_macros.jinja' as component_macros%}
import { useState, useContext, useEffect } from "react";
import { useWebsocket } from "../hooks/useWebsocket";
import { WebsocketContext } from "../context/WebsocketContext";
import { toast } from 'react-toastify';
import { CustomLineChart } from "../components/CustomLineChart"; 
import { Logs } from "../components/Logs";
import { GaugeComponent } from "react-gauge-component";
import convertTypeValue from "../utils/convertTypeValue";
import JsonView from "@uiw/react-json-view";
import { darkTheme } from "@uiw/react-json-view/dark";

const {{screen.name}} = () => {
    const ws = useContext(WebsocketContext);

    {# Collect all live components recursively #}
    {% set live_components = [] %}
    {% for element in screen.elements recursive %}
        {% if element.__class__.__name__ == 'LiveComponent' %}
            {{ live_components.append(element) or '' }}
        {% elif element.__class__.__name__ == 'ReusableComponent' %}
            {# Recurse into the definition of the reusable component #}
            {% if element.ref.definition.__class__.__name__ == 'LiveComponent' %}
                {{ live_components.append(element.ref.definition) or '' }}
            {% endif %}
        {% elif element.__class__.__name__ in ('Row', 'Column') %}
            {{ loop(element.elements) }}
        {% endif %}
    {% endfor %}

    {# Generate state and WebSocket hooks for each live component #}
    {% for lc in live_components %}

    {% if lc.definition.__class__.__name__ == 'LineChart' %}
        {% continue %}
    {% endif %}

    {# Set the default content as the first thing in state #}
    {% if lc.definition.__class__.__name__ == 'Form' or lc.definition.__class__.__name__ == 'Notification' %}
        {% set default_content = '' %}
    {% else %}
        {% set default_content = lc.definition.content %}
    {% endif %}
    const [{{ lc.dataName }}, set{{ lc.dataName | capitalize }}] = useState("{{default_content}}");

    {% if lc.definition.__class__.__name__ == 'Notification' %}
    {% if lc.definition.type == 'info' %}
        // Give a unique name to the notification function
        const notify{{lc.definition.name | capitalize}} = () => toast.info({{ lc.dataName }});
    {% elif lc.definition.type == 'warning' %}
        const notify{{lc.definition.name | capitalize}} = () => toast.warning({{ lc.dataName }});
    {% elif lc.definition.type == 'error' %}
        const notify{{lc.definition.name | capitalize}} = () => toast.error({{ lc.dataName }});
    {% elif lc.definition.type == 'success' %}
        const notify{{lc.definition.name | capitalize}} = () => toast.success({{ lc.dataName }});
    {% else %}
        // Default case when type is not specified
        const notify{{lc.definition.name | capitalize}} = () => toast({{ lc.dataName }});
    {% endif %}
    useEffect(() => {
        if ({{ lc.dataName }} !== "") { // Only trigger if it has a value
            notify{{lc.definition.name | capitalize}}();
        }
    }, [{{ lc.dataName }}]);
    {% endif %}

    {# // WebSocket handler: Build an object based on the entity's attribute definitions. #}
    useWebsocket(ws, "{{ lc.topic }}", (msg) => {
        let entityData = {};
        {% for attr in lc.entity.attributes %}
            {# // Assuming each attribute has a 'name' and a type (e.g., 'IntAttribute', etc.) #}
            entityData["{{ attr.name }}"] = convertTypeValue(msg["{{ attr.name }}"], "{{ attr.__class__.__name__ }}");
        {% endfor %}

        try {
            {# If the entity has a single attribute, set the state to that value. #}
            {% if lc.entity.attributes|length == 1 %}
                set{{ lc.dataName | capitalize }}(entityData["{{ lc.entity.attributes[0].name }}"]);
            {% else %}
                set{{ lc.dataName | capitalize }}(entityData);
            {% endif %}
        } catch (error) {
            toast.error("An error occurred while setting {{ lc.dataName }}: " + error.message);
            console.error("Error setting {{ lc.dataName }}:", error);
        }
    });

    {% endfor %}

    return (
        <div className="screen-container">
            {% for element in screen.elements %}
                {{ component_macros.render_element(element) }}
            {% endfor %}
        </div>
    );
}

export default {{screen.name}};