import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import {ToastContainer, Flip} from 'react-toastify';
{% for screen in screens %}
import {{ screen.name }} from './screens/{{ screen.name }}';
{% endfor %}
import NotFound from './screens/NotFound';
import Login from './screens/Login'
import Forbidden from './screens/Forbidden'
import ProtectedRoute from './screens/ProtectedRoute'

{% if webpage.navbar_screens %}
import NavBar from "./components/NavBar";
{% endif %}

import { WebsocketProvider } from "./context/WebsocketContext";

// Function to determine the base path dynamically
const getBasePath = () => {
  const path = window.location.pathname;
  const segments = path.split('/').filter(Boolean); // Remove empty segments (e.g., leading "/")
  if (segments.length >= 2 && segments[0] === 'apps') {
    const uid = segments[1];
    return `/apps/${uid}/`;
  }
  return '/'; // Fallback to root if the path doesnâ€™t match the expected pattern
}

const App = () => {
  const basePath = getBasePath();
  
  return (
    <WebsocketProvider>
      <div className="app-container">
        <Router basename={basePath}>
            {% if webpage.navbar_screens %}
              <NavBar
                screens={[
                  {% for screen in webpage.navbar_screens %}
                  {url: "{{screen.url}}", title: "{{screen.title}}" },
                  {% endfor %}
                ]},
                includeLogin={
                {% if screen.allowed_roles | length > 0 %}
                  true
                {% else %}
                  false
                {% endif %}
                }
                />
            {% endif %}
            
            <Routes>
              {/* Unprotected routes */}
              {% for screen in screens %}
              {% if screen.allowed_roles == [] %}
              <Route path="{{ screen.url | lower }}" element={<{{ screen.name }} />} />
              {% endif %}
              {% endfor %}

              {/* Protected routes */}
              {% for screen in screens %}
              {% if screen.allowed_roles | length > 0 %}
              <Route element={<ProtectedRoute allowedRoles={ [
                {% for role in screen.allowed_roles %}
                  "{{role.name}}",
                {% endfor %}
              ] } />}>
                <Route path="{{ screen.url | lower }}" element={<{{ screen.name }} />} />
              </Route>
              {% endif %}
              {% endfor %}
              {/* Catch-all 404 route */}
              <Route path="*" element={<NotFound />} />
              <Route path="/login" element={<Login />} />
              {/* Forbidden route */}
              <Route path="/forbidden" element={<Forbidden />} />
            </Routes>
        </Router>
      </div> 
      <ToastContainer
        position="bottom-right"
        autoClose={1000}
        hideProgressBar={true}
        newestOnTop={false}
        closeOnClick={false}
        rtl={false}
        pauseOnHover
        theme="dark"
        transition={Flip}
        limit={10}
        stacked={true}
      />
    </WebsocketProvider>

  );
}

export default App;
